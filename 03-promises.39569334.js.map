{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAaC,SAASC,cAAc,uBACpCC,EAAYF,SAASC,cAAc,sBACnCE,EAASH,SAASC,cAAc,wBActC,SAASG,EAAeC,EAAUC,IAXlC,SAAuBC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,G,EAM/BO,CAAcV,EAAUC,GACrBU,MAAK,EAACT,SAAEA,EAAQC,MAAEA,MACjBS,EAAApB,GAASqB,OAAOC,QACd,uBAAqBZ,EAAY,QAASa,OACtCrB,EAAKsB,OAAiBd,EAAWC,MAClC,IAGNc,OAAM,EAACf,SAAEA,EAAQC,MAAEA,MAClBS,EAAApB,GAASqB,OAAOK,QACd,sBAAoBhB,EAAY,QAASa,OACrCrB,EAAKsB,OAAiBd,EAAWC,MAClC,G,CA1BER,SAASC,cAAc,QA+B/BuB,iBAAiB,UAAUC,IAE9B,GADAA,EAAEC,iBAEAN,OAAOrB,EAAWsB,OAAS,GAC3BD,OAAOlB,EAAUmB,OAAS,GAC1BD,OAAOjB,EAAOkB,OAAS,EAEvBJ,EAAApB,GAASqB,OAAOK,QAAQ,yCAExB,IAAK,IAAIhB,EAAW,EAAGA,EAAWJ,EAAOkB,MAAOd,IAC9CoB,YAAW,KACTvB,EAAeG,EAAUL,EAAUmB,MAAM,GACxCD,OAAOrB,EAAWsB,OAASd,EAAWa,OAAOlB,EAAUmB,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["'use strict';\nimport Notiflix from 'notiflix';\n\nconst firstDelay = document.querySelector(\"input[name='delay']\");\nconst delayStep = document.querySelector(\"input[name='step']\");\nconst amount = document.querySelector(\"input[name='amount']\");\nconst form = document.querySelector('form');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n\nfunction promiseCreator(position, delay) {\n  createPromise(position, delay)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(\n        `✅ Fulfilled promise ${position + 1} in ${\n          Number(firstDelay.value) + position * delay\n        }ms`\n      );\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(\n        `❌ Rejected promise ${position + 1} in ${\n          Number(firstDelay.value) + position * delay\n        }ms`\n      );\n    });\n}\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n  if (\n    Number(firstDelay.value) < 0 ||\n    Number(delayStep.value) < 0 ||\n    Number(amount.value) < 0\n  ) {\n    Notiflix.Notify.failure(`❌ Please provide positive values`);\n  } else {\n    for (let position = 0; position < amount.value; position++) {\n      setTimeout(() => {\n        promiseCreator(position, delayStep.value);\n      }, Number(firstDelay.value) + position * Number(delayStep.value));\n    }\n  }\n});\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$firstDelay","document","querySelector","$47d4ff9957288465$var$delayStep","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$promiseCreator","position1","delay1","position","delay","shouldResolve","Math","random","Promise","resolve","reject","$47d4ff9957288465$var$createPromise","then","$parcel$interopDefault","Notify","success","Number","value","catch","failure","addEventListener","e","preventDefault","setTimeout"],"version":3,"file":"03-promises.39569334.js.map"}